{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/SearchBar/HandleError.js","App.js","registerServiceWorker.js","index.js"],"names":["Business","props","this","image","name","address","city","state","zipCode","category","rating","reviewCount","url","className","target","rel","href","src","alt","React","Component","BusinessList","restrauntInfo","businesses","map","business","zip","review","key","id","SearchBar","_renderSortByOptions","object","Object","keys","sortByOptions","sortByOption","sortByOptionValue","_getSortByClass","onClick","_handleSortByChange","bind","sortBy","_handleTermChange","e","setState","term","value","_handleLocationChange","location","_handleSearch","searchYelp","preventDefault","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","imageSrc","image_url","address1","zip_code","categories","title","review_count","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uUAkDeA,G,wBA3CX,WAAYC,GAAO,qEACTA,I,sEAGD,IAAD,EAYAC,KAAKD,MAVLE,EAFA,EAEAA,MACAC,EAHA,EAGAA,KACAC,EAJA,EAIAA,QACAC,EALA,EAKAA,KACAC,EANA,EAMAA,MACAC,EAPA,EAOAA,QACAC,EARA,EAQAA,SACAC,EATA,EASAA,OACAC,EAVA,EAUAA,YACAC,EAXA,EAWAA,IAGJ,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,mBACX,uBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAMJ,GAAK,yBAAKK,IAAKd,EAAOe,IAAKd,MAElF,4BAAKA,GACL,yBAAKS,UAAU,wBACX,yBAAKA,UAAU,oBACX,2BAAIR,GACJ,2BAAIC,GACJ,2BAAIC,EAAJ,KAAaC,IAEjB,yBAAKK,UAAU,oBACX,4BAAKJ,GACL,wBAAII,UAAU,UAAd,WAAgCH,EAAhC,MACA,uCAAaC,U,GAlCdQ,IAAMC,YCqCdC,G,kBApCX,WAAYpB,GAAO,qEACTA,I,sEAIN,IAAIqB,EAAgBpB,KAAKD,MAAMsB,WAAWC,KAAI,SAACC,GAC3C,IAAIrB,EAAOqB,EAAQ,KACftB,EAAQsB,EAAQ,SAChBpB,EAAUoB,EAAQ,QAClBnB,EAAOmB,EAAQ,KACflB,EAAQkB,EAAQ,MAChBC,EAAMD,EAAQ,QACdf,EAASe,EAAQ,OACjBE,EAASF,EAAQ,YACjBb,EAAMa,EAAQ,IAClB,OAAO,kBAAC,EAAD,CACHG,IAAKH,EAASI,GACd1B,MAAOA,EACPC,KAAMA,EACNC,QAASA,EACTC,KAAMA,EACNC,MAAOA,EACPC,QAASkB,EACThB,OAAQA,EACRC,YAAagB,EACbf,IAAKA,OAGb,OACI,yBAAKC,UAAU,gBACVS,O,GA/BUH,IAAMC,YC8ElBU,G,kBA1EX,WAAY7B,GAAO,IAAD,8BACd,4CAAMA,KAkCV8B,qBAAuB,SAACC,GACpB,OAAOC,OAAOC,KAAK,EAAKC,eAAeX,KAAI,SAAAY,GACvC,IAAIC,EAAoB,EAAKF,cAAcC,GAC3C,OAAQ,wBACJvB,UAAW,EAAKyB,gBAAgBD,GAChCE,QAAS,EAAKC,oBAAoBC,KAAzB,eAAoCJ,GAC7CT,IAAKS,GACJD,OA1CK,EA8ClBE,gBAAkB,SAACF,GACf,OAAG,EAAK7B,MAAMmC,SAAWN,EACd,SAEA,IAlDG,EAwDlBO,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CACVC,KAAMF,EAAE9B,OAAOiC,SA1DL,EA6DlBC,sBAAwB,SAACJ,GACrB,EAAKC,SAAS,CACVI,SAAUL,EAAE9B,OAAOiC,SA/DT,EAmElBG,cAAgB,SAACN,GACb,EAAK3C,MAAMkD,WAAW,EAAK5C,MAAMuC,KAAM,EAAKvC,MAAM0C,SAAU,EAAK1C,MAAMmC,QACvEE,EAAEQ,kBAnEF,EAAK7C,MAAQ,CACTuC,KAAM,GACNG,SAAU,GACVP,OAAQ,cAEZ,EAAKP,cAAgB,CACjB,aAAe,aACf,gBAAkB,SAClB,gBAAkB,gBAVR,E,sEAgBd,OACI,yBAAKtB,UAAU,aACX,yBAAKA,UAAU,0BACX,4BACKX,KAAK6B,qBAAqB7B,KAAKiC,iBAGxC,yBAAKtB,UAAU,oBACX,2BAAOwC,SAAUnD,KAAKyC,kBAAmBW,YAAY,kCACrD,2BAAOD,SAAUnD,KAAK8C,sBAAuBM,YAAY,YAE7D,yBAAKf,QAASrC,KAAKgD,cAAerC,UAAU,oBACxC,iD,0CAyBIuB,GAChBlC,KAAK2C,SAAS,CAACH,OAAQN,Q,GAvDPjB,IAAMC,YCkBfmC,GCxBKnC,YDFP,CACXoC,OADW,SACJV,EAAMG,EAAUP,GACrB,OAAOe,MAAM,sFAAD,OAAuFX,EAAvF,qBAAwGG,EAAxG,oBAA4HP,GAAU,CAChJgB,QAAS,CACPC,cAAc,UAAD,OALN,uIAORC,MAAK,SAAAC,GACN,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACN,GAAIA,EAAaxC,WACf,OAAOwC,EAAaxC,WAAWC,KAAI,SAAAC,GAAQ,MAAK,CAC9CI,GAAIJ,EAASI,GACbmC,SAAUvC,EAASwC,UACnB7D,KAAMqB,EAASrB,KACfC,QAASoB,EAASwB,SAASiB,SAC3B5D,KAAMmB,EAASwB,SAAS3C,KACxBC,MAAOkB,EAASwB,SAAS1C,MACzBC,QAASiB,EAASwB,SAASkB,SAC3B1D,SAAUgB,EAAS2C,WAAW,GAAGC,MACjC3D,OAAQe,EAASf,OACjBC,YAAac,EAAS6C,uBEajBC,E,YAvBb,WAAYtE,GAAQ,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CACXgB,WAAY,IAEd,EAAK4B,WAAa,EAAKA,WAAWV,KAAhB,gBALD,E,wEAORK,EAAMG,EAAUP,GAAS,IAAD,OACjCa,EAAKC,OAAOV,EAAMG,EAAUP,GAAQkB,MAAK,SAAArC,GACvC,EAAKsB,SAAS,CAACtB,WAAYA,S,+BAI7B,OACE,yBAAKV,UAAU,OACb,+CACA,kBAAC,EAAD,CAAWsC,WAAYjD,KAAKiD,aAC5B,kBAAC,EAAD,CAAc5B,WAAYrB,KAAKK,MAAMgB,aACrC,4BAAI,8E,GAnBMJ,IAAMC,WCAlBoD,EAAcC,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlB,MAAK,SAAAsB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7E,QACfwE,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,aAAwBvB,OAAOzB,UAC3CiD,SAAWxB,OAAOzB,SAASiD,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,aAAN,sBAENzB,EAwCX,SAAiCM,GAE/BrB,MAAMqB,GACHlB,MAAK,SAAAC,GAGkB,MAApBA,EAASuC,SACuD,IAAhEvC,EAASH,QAAQ2C,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAM3C,MAAK,SAAAsB,GACjCA,EAAasB,aAAa5C,MAAK,WAC7Bc,OAAOzB,SAASwD,eAKpB5B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEAzDAiB,CAAwB5B,GAHxBD,EAAgBC,OC7BxB6B,K","file":"static/js/main.c9436c8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\n\r\n// The purpose of the <Business /> component is to represent how a business (a restaurant) in Ravenous will be formatted and styled\r\nclass Business extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        const {\r\n            image,\r\n            name,\r\n            address,\r\n            city,\r\n            state,\r\n            zipCode,\r\n            category,\r\n            rating,\r\n            reviewCount,\r\n            url\r\n        } = this.props\r\n\r\n        return(\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}><img src={image} alt={name}/></a>\r\n                </div>\r\n                <h2>{name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{address}</p>\r\n                        <p>{city}</p>\r\n                        <p>{state}, {zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{category}</h3>\r\n                        <h3 className=\"rating\">Rating: {rating}/5</h3>\r\n                        <p>Reviews: {reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default Business;\r\n\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business.js';\r\n\r\n\r\nclass BusinessList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let restrauntInfo = this.props.businesses.map((business) => {\r\n            let name = business['name'];\r\n            let image = business['imageSrc']\r\n            let address = business['address'];\r\n            let city = business['city'];\r\n            let state = business['state'];\r\n            let zip = business['zipCode'];\r\n            let rating = business['rating'];\r\n            let review = business['reviewCount'];\r\n            let url = business['url'];\r\n            return <Business \r\n                key={business.id}\r\n                image={image}\r\n                name={name} \r\n                address={address} \r\n                city={city} \r\n                state={state} \r\n                zipCode={zip} \r\n                rating={rating} \r\n                reviewCount={review}\r\n                url={url}\r\n                />\r\n        })\r\n        return(\r\n            <div className=\"BusinessList\">\r\n                {restrauntInfo}\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\n\r\nlet getSortByClass = '';\r\nlet handleSortByChange = '';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n        this.sortByOptions = {\r\n            'Best Match' : 'best_match',\r\n            'Highest Rated' : 'rating',\r\n            'Most Reviewed' : 'review_count'\r\n        };\r\n    }\r\n    \r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this._renderSortByOptions(this.sortByOptions)}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this._handleTermChange} placeholder=\"What are you in the mood for?\" />\r\n                    <input onChange={this._handleLocationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div onClick={this._handleSearch} className=\"SearchBar-submit\">\r\n                    <a>Letâ€™s Go!</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // _ denotes different types of methods/functions after render because these functions are not part of the life cycle\r\n    _renderSortByOptions = (object) => {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption]\r\n            return (<li \r\n                className={this._getSortByClass(sortByOptionValue)}\r\n                onClick={this._handleSortByChange.bind(this, sortByOptionValue)}\r\n                key={sortByOptionValue}>\r\n                {sortByOption}\r\n            </li>)\r\n        });\r\n    }\r\n    _getSortByClass = (sortByOption) => {\r\n        if(this.state.sortBy === sortByOption){\r\n            return 'active'\r\n        } else {\r\n            return ''\r\n        };\r\n    }\r\n    _handleSortByChange(sortByOption){\r\n        this.setState({sortBy: sortByOption});\r\n    }\r\n    _handleTermChange = (e) =>{\r\n        this.setState({\r\n            term: e.target.value\r\n        });\r\n    }\r\n    _handleLocationChange = (e) => {\r\n        this.setState({\r\n            location: e.target.value\r\n        });\r\n    }\r\n\r\n    _handleSearch = (e) => {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        e.preventDefault();\r\n    }\r\n};\r\n\r\n\r\nexport default SearchBar;\r\n\r\n\r\n//The purpose of renderSortByOptions() is to dynamically create the list items needed to display the sort options (Best Match, Highest Rated, Most Reviewed)\r\n// This is to help future proof against potential changes to the Yelp API.\r\n//The method should iterate through the keys and values of the sortByOptions object and return a list item. The list item elements should use the keys as an attribute, and the values as content. \r\n\r\n// stores object values in a variable. then access the sortByOptions values using the sortByOption parameter of the callback function.\r\n","const apiKey = 'OgdR0x5YyRiBgtXgMi1J9TDBB76B4nOJh3Sq3Ry1Dft9GkowCyi76VQVVmmjmRmpOodNbqBeLv3SH_3mJOM6gIWOlMapj6gkzG5JZUpm06ZNv2Q9QEwGht3-cH6CXnYx'; // Insert API key here.\r\nconst Yelp = {\r\n  search(term, location, sortBy) {\r\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${apiKey}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (jsonResponse.businesses) {\r\n        return jsonResponse.businesses.map(business => ({\r\n          id: business.id,\r\n          imageSrc: business.image_url,\r\n          name: business.name,\r\n          address: business.location.address1,\r\n          city: business.location.city,\r\n          state: business.location.state,\r\n          zipCode: business.location.zip_code,\r\n          category: business.categories[0].title,\r\n          rating: business.rating,\r\n          reviewCount: business.review_count\r\n        }));\r\n      }\r\n    });\r\n  }\r\n }\r\nexport default Yelp;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//old\r\n//import { CLIENT_ID, SECRET } from './YelpInfo.js';\r\n//var accessToken = '';\r\n//var CLIENT_ID = 'RShZblzXb3OmIiAlLi6d2A';\r\n//var SECRET = 'OgdR0x5YyRiBgtXgMi1J9TDBB76B4nOJh3Sq3Ry1Dft9GkowCyi76VQVVmmjmRmpOodNbqBeLv3SH_3mJOM6gIWOlMapj6gkzG5JZUpm06ZNv2Q9QEwGht3-cH6CXnYx';\r\n\r\n\r\n//const Yelp = {\r\n   // getAccessToken() {\r\n       // if(accessToken === true){\r\n           // return new Promise(resolve => {\r\n              //  resolve(accessToken);\r\n            //});\r\n       // }\r\n        //var x = new XMLHttpRequest();   // or fetch\r\n  \r\n       // return /*fetch*/x.open('GET',`https://cors-anywhere.herokuapp.com/https://api.yelp.com/oauth2/token?grant_type=client_credentials&client_id=${CLIENT_ID}&client_secret=${SECRET}`, {\r\n\r\n       /*     method: 'POST'\r\n        }).then((response) => {\r\n            if(response.ok){\r\n                return response.json();\r\n            }\r\n            throw new Error('Request failed!');\r\n        }, networkError => console.log(networkError.message)\r\n        ).then(jsonResponse => {\r\n            accessToken = jsonResponse.access_token;\r\n            return accessToken\r\n        });\r\n    },\r\n    search(term, location, sortBy) {\r\n        return Yelp.getAccessToken().then(() => {\r\n            return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            }).then(response => {\r\n                if(response.ok) {\r\n                    return response.json();\r\n                }\r\n                throw new Error('Request failed!');\r\n                }, networkError => console.log(networkError.message)\r\n            ).then(jsonResponse => {\r\n                console.log(jsonResponse)\r\n                if (jsonResponse.businesses) {\r\n                    return jsonResponse.businesses.map(business => (\r\n                        {\r\n                        id: business.id,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.category,\r\n                        rating: business.rating,\r\n                        reviewCount: business.review_count,\r\n                        url: business.url\r\n                        }\r\n                    ))\r\n                }\r\n            })\r\n        })\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default Yelp;*/\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Error extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Error\">\r\n                <span>{this.props.errorMessage}</span>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Error;","\r\nimport React from 'react';\r\nimport './App.css';\r\nimport Business from './components/Business/Business.js';\r\nimport BusinessList from './components/BusinessList/BusinessList.js';\r\nimport SearchBar from './components/SearchBar/SearchBar.js';\r\nimport Error from './components/SearchBar/HandleError.js';\r\n\r\nimport Yelp from './util/Yelp.js';\r\n//import Yelp from '../../util/Yelp';\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      businesses: []\r\n    };\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.search(term, location, sortBy).then(businesses => {\r\n      this.setState({businesses: businesses});\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>PARIS DeLiCiOuS</h1>\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} />\r\n        <h5><u>Â® Patrick Motsebo through Tech901 2020</u></h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n\r\n\r\n\r\n//old\r\n/*import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\n\r\nimport Business from './components/Business/Business.js';\r\nimport BusinessList from './components/BusinessList/BusinessList.js';\r\nimport SearchBar from './components/SearchBar/SearchBar.js';\r\nimport Error from './components/SearchBar/HandleError.js';\r\n\r\nimport Yelp from './util/Yelp.js';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            businesses: [],\r\n            message: \"\"\r\n        }\r\n    }\r\n\r\n    searchYelp = (term, location, sortBy) => {\r\n        if (!location || !term){\r\n            this.setState({\r\n                message: \"Please enter a location and term.\"\r\n            })\r\n        } else {\r\n            Yelp.search(term, location, sortBy).then(businesses => {\r\n                if(businesses.length > 0){\r\n                  return businesses; //businesses: [];\r\n                }\r\n                this.setState({\r\n                    businesses: businesses,\r\n                    message: \"\"\r\n                });\r\n            });\r\n        };\r\n    }  \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>PARIS DeLICiOUS</h1>\r\n                <SearchBar searchYelp={this.searchYelp}/>\r\n                <Error errorMessage={this.state.message}/>\r\n                <BusinessList businesses={this.state.businesses}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default App;\r\n*/\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}